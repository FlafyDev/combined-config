diff --git a/lib/modules.nix b/lib/modules.nix
index b9e9ca1e5d78..fa211e57b7c8 100644
--- a/lib/modules.nix
+++ b/lib/modules.nix
@@ -473,17 +473,28 @@ let
         else config;
     in
     if m ? config || m ? options then
-      let badAttrs = removeAttrs m ["_class" "_file" "key" "disabledModules" "imports" "options" "config" "meta" "freeformType"]; in
+      let
+        badAttrs = removeAttrs m ["_class" "_file" "key" "disabledModules" "inputs" "imports" "osImports" "hmImports" "options" "config" "meta" "freeformType"];
+        duplicateInputs = builtins.intersectAttrs (m.inputs or {}) (m.config.inputs or {});
+      in
       if badAttrs != {} then
         throw "Module `${key}' has an unsupported attribute `${head (attrNames badAttrs)}'. This is caused by introducing a top-level `config' or `options' attribute. Add configuration attributes immediately on the top level instead, or move all of them (namely: ${toString (attrNames badAttrs)}) into the explicit `config' attribute."
+      else if duplicateInputs != {} then
+        throw "Module `${key}' defines the input `${head (attrNames duplicateInputs)}' twice, once in the top-level `inputs' attribute and once in the `config.inputs' attribute. Rename or remove one of these definitions."
       else
+        let
+          additionalConfig =
+            optionalAttrs (m ? inputs || (m.config or {}) ? inputs) { inputs = (m.inputs or {}) // (m.config.inputs or {}); }
+            // optionalAttrs (m ? osImports) { osImports = (m.osImports or []) ++ (m.config.osImports or []); }
+            // optionalAttrs (m ? hmImports) { hmImports = (m.hmImports or []) ++ (m.config.hmImports or []); };
+        in
         { _file = toString m._file or file;
           _class = m._class or null;
           key = toString m.key or key;
           disabledModules = m.disabledModules or [];
           imports = m.imports or [];
           options = m.options or {};
-          config = addFreeformType (addMeta (m.config or {}));
+          config = addFreeformType (addMeta (m.config or {} // additionalConfig));
         }
     else
       # shorthand syntax
@@ -1405,6 +1416,7 @@ private //
   #       are just needed by types.nix, but are not meant to be consumed
   #       externally.
   inherit
+    collectModules
     defaultOrderPriority
     defaultOverridePriority
     defaultPriority
